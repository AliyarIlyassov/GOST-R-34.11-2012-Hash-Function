#include "g256sum.h"
#include <iostream>
#include <stdio.h>

int main() {
//  Надо добавить считывание в бинарное считывание в data
//  uint8_t data[DATA_BUF_SIZE];
    uint8_t ans256[BLOCK_SIZE / 2];
    memset(ans256, 0x00, BLOCK_SIZE / 2);
    struct ctx hash_ctx;
    uint8_t m1[63] = {
        0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36,
        0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
        0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
        0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
        0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34,
        0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36,
        0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
        0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
    };
    uint8_t m2[72] = {
        0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
        0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
        0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
        0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
        0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
        0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c,
        0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6,
        0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c,
        0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1
    };
    try {
        // Первый этап
        init(&hash_ctx, HASH256);
        // Надо будет написать функцию подсчитывающую размер
        // вводимых данных и заменить 3 параметр hash
        // Непостредственное вычисление хэш-функции
        hash(&hash_ctx, m2, sizeof(m2)); //data вместо m2
        finish(&hash_ctx, ans256);
        print_h(hash_ctx.h256, 32);
    }
    catch(...) {
        std::cerr << "Error!\n";
    }
    return 0;
}
